;;; Compiled snippets and support files for `c++-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets 'c++-mode
                     '(("uqe" "auto pos = std::unique(std::begin(${1:container}), std::end($1));\n$0\n" "unique" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/uqe" nil nil)
                       ("upr" "std::transform(std::begin(${1:container}), std::end($1), std::begin($1), [](char c) {\nreturn std::toupper(c);\n});\n$2\n$0\n" "transform" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/upr" nil nil)
                       ("ucp" "std::unique_copy(std::begin(${1:container}), std::end($1),\n  std::ostream_iterator<string>(std::cout, \"\\n\"));\n$0\n" "unique_copy" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/ucp" nil nil)
                       ("try" "try {\n    $0\n} catch (${1:type}) {\n\n}\n" "try" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/try" nil nil)
                       ("trm" "${1:container}.erase($1.find_last_not_of(\" \\t\\n\\r\") + 1);\n$0\n" "generate_n" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/trm" nil nil)
                       ("tfm" "std::transform(std::begin(${1:container}), std::end($1),\n  std::begin($1), []($2) {\n$3%\n});\n$0\n" "transform" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/tfm" nil nil)
                       ("swr" "std::swap_ranges(std::begin(${1:container}), std::end($1), std::begin($2));\n$0\n" "swap_ranges" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/swr" nil nil)
                       ("stv" "std::vector<$2> $3\n$0\n" "vector" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/stv" nil nil)
                       ("sts" "std::stable_sort(std::begin(${1:container}), std::end($1));\n$0\n" "stable_sort" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/sts" nil nil)
                       ("str" "#include <string>" "str" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/str" nil nil)
                       ("sto" "std::cout <<\n$0\n" "cout" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/sto" nil nil)
                       ("sti" "std::cin >>\n$0\n" "cin" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/sti" nil nil)
                       ("sth" "std::sort_heap(std::begin(${1:container}), std::end($1));\n$0\n" "sort_heap" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/sth" nil nil)
                       ("std" "using namespace std;" "std" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/std" nil nil)
                       ("srt" "std::sort(std::begin(${1:container}), std::end($1));\n$0\n" "sort" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/srt" nil nil)
                       ("srn" "auto pos = std::search_n(std::begin(${1:container}), std::end($1),$2,$3);\nif (pos != std::end($1)) {\n  $4\n}\n$0\n" "search_n" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/srn" nil nil)
                       ("srh" "auto pos = std::search(std::begin(${1:container}), std::end($1),\n  std::begin($2), std::end($3));\nif (pos != std::end($1)) {\n  $4\n}\n$0\n" "search" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/srh" nil nil)
                       ("spt" "auto pos = std::stable_partition(std::begin(${1:container}), std::end($1), []($2) {\n  $3});\nif (pos != std::end($1)) {\n  $4\n}\n$0\n" "stable_partition" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/spt" nil nil)
                       ("shf" "std::random_shuffle(std::begin(${1:container}), std::end($1));\n$0\n" "random_shuffle" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/shf" nil nil)
                       ("rvr" "std::reverse(std::begin(${1:container}), std::end($1));\n$0\n" "reverse" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/rvr" nil nil)
                       ("rvc" "std::reverse_copy(std::begin(${1:container}), std::end($1), std::begin($2));\n$0\n" "reverse_copy" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/rvc" nil nil)
                       ("rte" "std::rotate(std::begin(${1:container}), std::begin($2), std::end($1));\n$0\n" "rotate" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/rte" nil nil)
                       ("rtc" "std::rotate_copy(std::begin(${1:container}), std::begin($2), std::end($1),\n  std::begin($3));\n$0\n" "rotate_copy" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/rtc" nil nil)
                       ("rpl" "std::replace(std::begin(${1:container}), std::end($1), $2, $3);\n$0\n" "replace" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/rpl" nil nil)
                       ("rpi" "std::replace_if(std::begin(${1:container}), std::end($1), []($2) {\n$3\n}, $4);\n$0\n" "replace_if" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/rpi" nil nil)
                       ("rpc" "std::replace_copy(std::begin(${1:container}), std::end($1), std::begin($1), $2, $3);\n$0\n" "replace_copy" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/rpc" nil nil)
                       ("rmv" "auto pos = std::remove(std::begin(${1:container}), std::end($1), $2);\nif (pos != std::end($1)) {\n  $3\n}\n$0\n" "remove" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/rmv" nil nil)
                       ("rmi" "auto pos = std::remove_if(std::begin(${1:container}), std::end($1), []($2) {\n  $3\n});\nif (pos != std::end($1)) {\n  $4\n}\n$0\n" "remove_if" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/rmi" nil nil)
                       ("rmf" "std::remove_copy_if(std::begin(${1:container}), std::end($1),\n  std::begin($1), []($2) {\n    $3\n});\n$0\n" "remove_copy_if" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/rmf" nil nil)
                       ("rmc" "std::remove_copy(std::begin(${1:container}), std::end($1),\n  std::begin($1), $2);\n$0\n" "remove_copy" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/rmc" nil nil)
                       ("rci" "std::replace_copy_if(std::begin(${1:container}), std::end($1),\n  std::begin($1), []($2) {\n  $3\n}, $4);\n$0\n" "replace_copy_if" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/rci" nil nil)
                       ("ptn" "auto pos = std::partition(std::begin(${1:container}), std::end($1), []($2) {\n  $3\n});\nif (pos != std::end($1)) {\n  $4\n}\n$0\n" "partition" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/ptn" nil nil)
                       ("ptc" "std::partition_copy(std::begin(${1:container}), std::end($1),\n                  std::begin($2), std::end($3));\n$0\n" "partition_copy" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/ptc" nil nil)
                       ("pst" "std::partial_sort(std::begin(${1:container}), std::end($1), std::end($1));\n$0\n" "partial_sort" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/pst" nil nil)
                       ("psc" "std::partial_sort_copy(std::begin(${1:container}), std::end($1),\n                  std::begin($2), std::end($3));\n$0\n" "partial_sort_copy" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/psc" nil nil)
                       ("prp" "if (std::prev_permutation(std::begin(${1:container}), std::end($1))) {\n  $2\n}\n$0\n" "prev_permutation" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/prp" nil nil)
                       ("ppt" "auto pos = std::partition_point(std::begin(${1:container}), std::end($1), []($2) {\n  $3\n});\nif (pos != std::end($1)) {\n  $4\n}\n$0\n" "partition_point" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/ppt" nil nil)
                       ("phh" "std::push_heap(std::begin(${1:container}), std::end($1));\n$0\n" "push_heap" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/phh" nil nil)
                       ("oit" "std::copy(std::begin(${1:container}), std::end($1), std::ostream_iterator<$2>{\n%\\istd::cout, \"$3\"\n});\n$0\n" "copy" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/oit" nil nil)
                       ("nxp" "if (std::next_permutation(std::begin(${1:container}), std::end($1))) {\n  $2\n}\n$0\n" "next_permutation" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/nxp" nil nil)
                       ("nth" "std::nth_element(std::begin(${1:container}), std::end($1), std::end($1));\n$0\n" "nth_element" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/nth" nil nil)
                       ("ns" "namespace " "namespace ..." nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/ns" nil nil)
                       ("nno" "if (std::none_of(std::begin(${1:container}), std::end($1), []($2) {\n  $3\n})) {\n  $4\n}\n$0\n" "none_of" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/nno" nil nil)
                       ("mxe" "auto pos = std::max_element(std::begin(${1:container}), std::end($1));\n$0\n" "max_element" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/mxe" nil nil)
                       ("msm" "auto values = std::mismatch(std::begin(${1:container}), std::end($1), std::begin($1));\nif (values.first == std::end($1)) {\n  $2\n} else {\n  $3\n}\n$0\n" "mismatch" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/msm" nil nil)
                       ("mrg" "std::merge(std::begin(${1:container}), std::end($1),\nstd::begin($2), std::end($3), std::begin($4));\n$0\n" "merge" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/mrg" nil nil)
                       ("mpb" "std::move_backward(std::begin(${1:container}), std::end($1), std::end($1));\n$0\n" "move_backward" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/mpb" nil nil)
                       ("mne" "auto pos = std::min_element(std::begin(${1:container}), std::end($1));\n$0\n" "min_element" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/mne" nil nil)
                       ("mme" "auto minmax = std::minmax_element(std::begin(${1:container}), std::end($1));\n$0\n" "minmax_element" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/mme" nil nil)
                       ("mkh" "std::make_heap(std::begin(${1:container}), std::end($1));\n$0\n" "make_heap" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/mkh" nil nil)
                       ("map" "std::map<${1:type1}$0> ${2:var};" "map" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/map" nil nil)
                       ("lxc" "if (std::lexigraphical_compare(std::begin(${1:container}), std::end($1),\n  std::begin($2), std::end($3)) {\n  $4\n}\n$0\n" "lexigraphical_compare" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/lxc" nil nil)
                       ("lwr" "std::transform(std::begin(${1:container}), std::end($1), std::begin($1), [](char c) {\nreturn std::tolower(c);});\n$0\n" "transform" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/lwr" nil nil)
                       ("ltr" "${1:container}.erase(0, $1.find_first_not_of(\" \\t\\n\\r\"));\n$0\n" "transform" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/ltr" nil nil)
                       ("ita" "std::iota(std::begin(${1:container}), std::end($1), $2);\n$0\n" "iota" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/ita" nil nil)
                       ("isu" "auto pos = std::is_sorted_until(std::begin(${1:container}), std::end($1));\nif (pos != std::end($1)) {\n  $2\n}\n$0\n" "is_sorted_until" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/isu" nil nil)
                       ("iss" "if (std::is_sorted(std::begin(${1:container}), std::end($1))) {\n  $2\n}\n$0\n" "is_sorted" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/iss" nil nil)
                       ("ipt" "if (std::is_partitioned(std::begin(${1:container}), std::end($1), []($2) {\n  $3\n})) {\n  $4\n}\n$0\n" "is_partitioned" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/ipt" nil nil)
                       ("ipr" "if (std::is_permutation(std::begin(${1:container}), std::end($1), std::begin($2))) {\n  $3\n}\n$0\n" "is_permutation" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/ipr" nil nil)
                       ("io" "#include <iostream>" "io" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/io" nil nil)
                       ("ihu" "auto pos = std::is_heap_until(std::begin(${1:container}), std::end($1));\nif (pos != std::end($1)) {\n  $2\n}\n$0\n" "is_heap_until" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/ihu" nil nil)
                       ("ihp" "if (std::is_heap(std::begin(${1:container}), std::end($1))) {\n  $2\n}\n$0\n" "is_heap" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/ihp" nil nil)
                       ("gnr" "std::generate(std::begin(${1:container}), std::end($1), []($2) {\n  $3\n});\n$0\n" "generate" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/gnr" nil nil)
                       ("gnn" "std::generate_n(std::begin(${1:container}), $2, []($3) {\n  $4\n});\n$0\n" "generate_n" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/gnn" nil nil)
                       ("fre" "std::for_each(std::begin(${1:container}), std::end($1), []($2) {\n  $3\n});\n$0\n" "for_each" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/fre" nil nil)
                       ("fni" "auto pos = std::find_if(std::begin(${1:container}), std::end($1), []($2) {\n  $3\n});\nif (pos != std::end($1)) {\n  $4\n}\n$0\n" "find_if" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/fni" nil nil)
                       ("fne" "auto pos = std::find_std::end(std::begin(${1:container}), std::end($1),\n  std::begin($2), std::end($3));\nif (pos != std::end($1)) {\n  $4\n}\n$0\n" "find_end" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/fne" nil nil)
                       ("fnd" "auto pos = std::find(std::begin(${1:container}), std::end($1), $2);\nif (pos != std::end($1)) {\n  $3\n}\n$0\n" "find" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/fnd" nil nil)
                       ("fln" "std::fill_n(std::begin(${1:container}), $2, $3);\n$0\n" "fill_n" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/fln" nil nil)
                       ("fin" "auto pos = std::find_if_not(std::begin(${1:container}), std::end($1),[]($2) {\n  $3\n});\nif (pos != std::end($1)) {\n  $4\n}\n$0\n" "find_if_not" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/fin" nil nil)
                       ("fil" "std::fill(std::begin(${1:container}), std::end($1), $2);\n$0\n" "fill" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/fil" nil nil)
                       ("ffo" "auto pos = std::find_first_of(std::begin(${1:container}), std::end($1),\n  std::begin($2), std::end($3));\nif (pos != std::end($1)) {\n  $4\n}\n$0\n" "find_first_of" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/ffo" nil nil)
                       ("erm" "${1:container}.erase(std::remove(std::begin($1), std::end($1), $2), std::end($1));\n$0\n" "remove" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/erm" nil nil)
                       ("eql" "if (std::equal(std::begin(${1:container}), std::end($1), std::begin($2))) {\n  $3\n}\n$0\n" "equal" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/eql" nil nil)
                       ("doc" "/**\n * $0\n */" "doc" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/doc" nil nil)
                       ("d+=" "${1:MyClass}& operator+=(${2:const $1 &});" "d+=" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/d+=" nil nil)
                       ("cpy" "std::copy(std::begin(${1:container}), std::end($1), std::begin($2));\n$0\n" "copy" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/cpy" nil nil)
                       ("cpp" "#include \"`(file-name-nondirectory (file-name-sans-extension (buffer-file-name)))`.h\"" "cpp" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/cpp" nil nil)
                       ("cpn" "std::copy_n(std::begin(${1:container}), $2, std::end($1));\n$0\n" "copy_n" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/cpn" nil nil)
                       ("cpi" "std::copy_if(std::begin(${1:container}), std::end($1), std::begin($2),\n[]($3) {\n  $4\n});\n$0\n" "copy_if" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/cpi" nil nil)
                       ("cpb" "std::copy_backward(std::begin(${1:container}), std::end($1), std::end($1));\n$0\n" "copy_backward" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/cpb" nil nil)
                       ("cnt" "auto n = std::count(std::begin(${1:container}), std::end($1), $2);\n$0\n" "count" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/cnt" nil nil)
                       ("cni" "auto n = std::count_if(std::begin(${1:container}), std::end($1), []($2) {\n  $3\n});\n$0\n" "count_if" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/cni" nil nil)
                       ("cin" "cin >> $0;" "cin" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/cin" nil nil)
                       ("ano" "if (std::any_of(std::begin(${1:container}), std::end($1), []($2) {\n  $3\n})) {\n  $4\n}\n$0\n" "any_of" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/ano" nil nil)
                       ("alo" "if (std::all_of(std::begin(${1:container}), std::end($1), []($2) {\n  $3\n})) {\n  $4\n}\n$0\n" "all_of" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/alo" nil nil)
                       ("ajf" "auto pos = std::adjacent_find(std::begin(${1:container}), std::end($1));\nif (pos != std::end($1)) {\n  $2\n}\n$0\n" "adjacent_find" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/ajf" nil nil)
                       ("acm" "auto sum = std::accumulate(std::begin(${1:container}), std::end($1), 0);\n$0\n" "accumulate" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/acm" nil nil)
                       ("acl" "auto sum = std::accumulate(std::begin(${1:container}), std::end($1), 0, [](int total, $2) {\n  $3\n});\n$0\n" "accumulate" nil nil nil "/home/ryan/.emacs.d/snippets/c++-mode/acl" nil nil)))


;;; Do not edit! File generated at Sun Jun 11 20:27:16 2017
